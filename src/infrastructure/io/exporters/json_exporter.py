"""
Exportador para formato JSON com relat칩rios avan칞ados.

Especializa칞칚o do FileExporter que adiciona gera칞칚o autom치tica de relat칩rios
baseado no tipo de dados detectado.
"""

from pathlib import Path
from typing import Any, Dict, List, Optional

from .file_exporter import FileExporter


class JsonExporter(FileExporter):
    """Exportador para formato JSON com relat칩rios avan칞ados."""

    def __init__(self, output_path: str, config: Optional[Dict[str, Any]] = None):
        """Inicializa exportador JSON com configura칞칚o opcional."""
        super().__init__(output_path)
        self.config = config or {}

    def export_batch_results(
        self, batch_results: List[Dict[str, Any]], format_type: str, destination: str
    ) -> str:
        """Exporta resultados de batch com relat칩rios avan칞ados."""
        # Exportar dados JSON b치sicos
        json_path = super().export_batch_results(
            batch_results, format_type, destination
        )

        # Gerar relat칩rio avan칞ado se configurado
        if self.config and self._should_generate_report():
            try:
                # Verificar tipos de dados espec칤ficos
                is_sensitivity_analysis = self._is_sensitivity_data(batch_results)
                is_optimization_data = self._is_optimization_data(batch_results)

                if is_sensitivity_analysis:
                    self._generate_sensitivity_report(batch_results)
                elif is_optimization_data:
                    self._generate_optimization_report(batch_results)
                else:
                    self._generate_execution_report(batch_results)

            except Exception as e:
                print(f"丘멆잺 Erro ao gerar relat칩rio avan칞ado: {e}")

        return json_path

    def _generate_sensitivity_report(self, batch_results: List[Dict[str, Any]]) -> None:
        """Gera relat칩rio espec칤fico para an치lise de sensibilidade."""
        try:
            from ..report_generators.sensitivity_report_generator import (
                SensitivityReportGenerator,
            )

            # Construir dados de sensibilidade
            sensitivity_data = {"batch_results": batch_results}

            session_path = Path(self.output_path)
            sensitivity_report_generator = SensitivityReportGenerator(session_path)
            sensitivity_report_generator.generate_sensitivity_report(sensitivity_data)

        except ImportError as e:
            print(
                f"丘멆잺 N칚o foi poss칤vel importar gerador de relat칩rios de sensibilidade: {e}"
            )
        except Exception as e:
            print(f"丘멆잺 Erro ao gerar relat칩rio de sensibilidade: {e}")

    def _generate_optimization_report(
        self, batch_results: List[Dict[str, Any]]
    ) -> None:
        """Gera relat칩rio espec칤fico para otimiza칞칚o."""
        print(
            "游늵 Dados de otimiza칞칚o detectados - usando relat칩rio espec칤fico de otimiza칞칚o"
        )
        # TODO: Implementar gerador espec칤fico de otimiza칞칚o
        # try:
        #     from ..report_generators.optimization_report_generator import (
        #         OptimizationReportGenerator,
        #     )
        #
        #     optimization_data = {"batch_results": batch_results}
        #     session_path = Path(self.output_path)
        #     optimization_report_generator = OptimizationReportGenerator(session_path)
        #     optimization_report_generator.generate_optimization_report(optimization_data)
        # except ImportError as e:
        #     print(f"丘멆잺 N칚o foi poss칤vel importar gerador de relat칩rios de otimiza칞칚o: {e}")
        # except Exception as e:
        #     print(f"丘멆잺 Erro ao gerar relat칩rio de otimiza칞칚o: {e}")

    def _generate_execution_report(self, batch_results: List[Dict[str, Any]]) -> None:
        """Gera relat칩rio para execu칞칚o normal."""
        try:
            from ..report_generators.execution_report_generator import (
                ExecutionReportGenerator,
            )

            # Construir dados do batch para o relat칩rio
            batch_data = {
                "batch_results": batch_results,
                "summary": {"total_experiments": len(batch_results)},
            }

            session_path = Path(self.output_path)
            execution_report_generator = ExecutionReportGenerator(
                self.config, session_path
            )
            execution_report_generator.generate_report(batch_data)

        except ImportError as e:
            print(f"丘멆잺 N칚o foi poss칤vel importar gerador de relat칩rios de execu칞칚o: {e}")
        except Exception as e:
            print(f"丘멆잺 Erro ao gerar relat칩rio de execu칞칚o: {e}")

    def _is_sensitivity_data(self, batch_results: List[Dict[str, Any]]) -> bool:
        """Verifica se os dados s칚o de an치lise de sensibilidade."""
        if not batch_results:
            return False

        # Verificar estruturas aninhadas t칤picas de dados de sensibilidade
        for result in batch_results:
            # Verificar se tem estrutura de batch com dados de sensibilidade
            if "batch_summary" in result:
                summary_results = result.get("batch_summary", {}).get("results", [])
                for summary_result in summary_results:
                    if any(
                        key in summary_result
                        for key in [
                            "sensitivity_indices",
                            "analysis_method",
                            "parameters_analyzed",
                        ]
                    ):
                        return True

            # Verificar se tem dados de sensibilidade diretos
            if "detailed_results" in result:
                detailed_results = result.get("detailed_results", [])
                for detailed_result in detailed_results:
                    if any(
                        key in detailed_result
                        for key in [
                            "sensitivity_indices",
                            "analysis_method",
                            "parameters_analyzed",
                        ]
                    ):
                        return True

            # Verificar diretamente no resultado
            if any(
                key in result
                for key in [
                    "sensitivity_indices",
                    "analysis_method",
                    "parameters_analyzed",
                    "n_samples",
                ]
            ):
                return True

        return False

    def _is_optimization_data(self, batch_results: List[Dict[str, Any]]) -> bool:
        """Verifica se os dados s칚o de otimiza칞칚o (Optuna)."""
        if not batch_results:
            return False

        # Verificar estruturas aninhadas t칤picas de dados de otimiza칞칚o
        for result in batch_results:
            # Verificar se tem estrutura de batch com dados de otimiza칞칚o
            if "batch_summary" in result:
                summary_results = result.get("batch_summary", {}).get("results", [])
                for summary_result in summary_results:
                    if any(
                        key in summary_result
                        for key in [
                            "study_name",
                            "n_trials",
                            "best_value",
                            "trials",
                            "direction",
                        ]
                    ):
                        return True

            # Verificar se tem dados de otimiza칞칚o diretos
            if "detailed_results" in result:
                detailed_results = result.get("detailed_results", [])
                for detailed_result in detailed_results:
                    if any(
                        key in detailed_result
                        for key in [
                            "study_name",
                            "n_trials",
                            "best_value",
                            "trials",
                            "direction",
                        ]
                    ):
                        return True

            # Verificar diretamente no resultado
            if any(
                key in result
                for key in [
                    "study_name",
                    "n_trials",
                    "best_value",
                    "trials",
                    "direction",
                ]
            ):
                return True

        return False

    def _should_generate_report(self) -> bool:
        """Verifica se deve gerar relat칩rio baseado na configura칞칚o."""
        try:
            report_config = (
                self.config.get("infrastructure", {})
                .get("result", {})
                .get("report", {})
            )
            return report_config.get("save_detailed_results", False)
        except Exception:
            return False

    def get_supported_formats(self) -> list[str]:
        """Lista formatos suportados."""
        return ["json"]
